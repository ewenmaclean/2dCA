spec Symbols = 
%%  Note can be interpreted as an absolute note
%%  Or an interval
    generated type Note ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | x | x1
%% can describe interals in the following way
%%     generated type Modifier ::= major | minor | diminished | perfect | augmented
%% %% these operators act on intervals
%% %% e.g. a fifth + a fifth = a ninth
%% %% start at a C, go up a fith, you get to G
%% %% go up a fifth from G, you get to D
%% %% so an interval which is 7, plus another, you get 2
    ops __ + __: Note * Note -> Note
		suc : Note -> Note 
 . suc(0) = 1 %(AxSucc0:p:100:r:0)%
 . suc(1) = 2 %(AxSucc1:p:100:r:0)%
 . suc(2) = 3 %(AxSucc2:p:100:r:0)%
 . suc(3) = 4 %(AxSucc3:p:100:r:0)%
 . suc(4) = 5 %(AxSucc4:p:100:r:0)%
 . suc(5) = 6 %(AxSucc5:p:100:r:0)%
 . suc(6) = 7 %(AxSucc6:p:100:r:0)%
 . suc(7) = 8 %(AxSucc7:p:100:r:0)%
 . suc(8) = 9 %(AxSucc8:p:100:r:0)%
 . suc(9) = x %(AxSucc9:p:100:r:0)%
 . suc(x) = x1 %(AxSucc10:p:100:r:0)%
 . suc(x1) = 0 %(AxSucc11:p:100:r:0)%

%%   . not major = minor
%%   . not major = diminished 
%%   . not major = perfect
%%   . not major = augmented
%%   . not minor = diminished
%%   . not minor = perfect
%%   . not minor = augmented
%%   . not diminished = perfect
%%   . not diminished = augmented
%%   . not perfect = augmented

    . not 0 = 1
    . not 0 = 2
    . not 0 = 3 
    . not 0 = 4
    . not 0 = 5
    . not 0 = 6
    . not 0 = 7
    . not 0 = 8
    . not 0 = 9 
    . not 0 = x
    . not 0 = x1

 forall c, d: Note 
    . suc(c) = suc(d) <=> c = d   %(AxSuccEql:p:100:r:0)%
    . suc(c) = 0 => c = x1        %(AxSucc0-11:p:100:r:0)%
    . c + 0 = c                   %(AxSuccDontKnow:p:100:r:0)%
    . c + suc(d) = suc(c+d)       %(AxSuccAdd:p:100:r:0)%
end

spec Chord = Symbols then   
  sorts 
        Chord
  ops
     %% Set the absolute root of the chord. 
        root: Chord -> Note   %(root_def:r:0)%

  preds
     %% Define an absolute note 
        hasAbsNote: Chord * Note   
        hasRelNote : Chord * Note

  %% Relate absolute and relative notes
  forall n:Note, c:Chord 
    . hasRelNote(c,n) <=> hasAbsNote(c,(root(c)+n))  %(reltoabs_note:r:0)%

  %% Define forbidden dissonances
  forall n:Note, c:Chord
    %% Two notes that can be interpreted as major and minor 3rd
    . not (hasRelNote(c,3) /\ hasRelNote(c,4))  %(dis_minorMajorThird:r:0)%
    %% Two notes that can be interpreted as perfect and diminished 5th
    . not (hasRelNote(c,7) /\ hasRelNote(c,6))  %(dis_perfectDimFifth:r:0)%
    %% One haftone away from the root is often quite dissonant
    . not hasRelNote(c,1)                       %(dis_second:r:0)%
    %% A minor 7th (rel 10) with a major 6th (rel 9) is pretty dissonant
    . not (hasRelNote(c,x) /\ hasRelNote(c,9)) %(dis_seventhsixth:r:0)%

end

%%dom7 => 7

spec Gdom7 = 
%% G, B, D, F
  Chord then
  op c:Chord
  . hasAbsNote(c,7)  %priority(2)%  %%remove 
  . hasAbsNote(c,x1) %priority(3)%  
  . hasAbsNote(c,2)  %priority(1)%  %%remove
  . hasAbsNote(c,5)  %priority(2)%  
  . root(c) = 7      %priority(1)%  
  . hasRelNote(c,0)  %priority(3)%  
  . hasRelNote(c,4)  %priority(3)%  
  . hasRelNote(c,7)  %priority(3)%  
  . hasRelNote(c,x)  %priority(2)%  
end

spec GenDom7 = 
  Chord then
  op c:Chord

  . hasAbsNote(c,x1) 
  . hasAbsNote(c,5) 

  . hasRelNote(c,0)
  
  . hasRelNote(c,7) 
  . hasRelNote(c,x) 
  

end

spec Bbmin = 
%% Bb, C#/Db, F
  Chord then
  op c:Chord
 
  . hasAbsNote(c,x)  %priority(1)%  %%remove
  . hasAbsNote(c,1)  %priority(3)% 
  . hasAbsNote(c,5)  %priority(2)% 
  . root(c) = x
  . hasRelNote(c,0)  %priority(2)% 
  . hasRelNote(c,3)  %priority(1)% %%remove
  . hasRelNote(c,7)  %priority(2)% 
  
end

spec GenBbmin = 

  Chord then
  op c:Chord
  . hasAbsNote(c,1)
  . hasAbsNote(c,5)

  . hasRelNote(c,0) 
  . hasRelNote(c,7) 
  
end

spec Generic = 
  Chord then
  op c:Chord
   . hasAbsNote(c,5)
   . hasRelNote(c,0) 
   . hasRelNote(c,7) 
end



interpretation I1: Generic to G7

interpretation I2: Generic to Bbmin

spec blend = combine I1,I2

spec expected_blend = 
%%% Dbdom7
%% Db, F, Ab, Cb/B

  Chord then
  op c:Chord
  . hasAbsNote(c,1)
  . hasAbsNote(c,5)
  . hasAbsNote(c,8) 
  . hasAbsNote(c,x1) 

  . hasRelNote(c,0)
  . hasRelNote(c,4)
  . hasRelNote(c,7) 
  . hasRelNote(c,x)

 
  %%. hasRelNote(c,7) generates . hasAbsNote(c,8) Ab as perfect 5th when root is Db
  
end

