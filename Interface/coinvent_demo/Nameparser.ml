type token =
  | SPEC
  | THEN
  | CHORD
  | OP
  | HASABSNOTE
  | ROOT
  | HASRELNOTE
  | END
  | PRIORITY
  | OPEN
  | CLOSE
  | EOF
  | COLON
  | PERCENT
  | IDENT of (string)
  | EQUALS
  | INT of (int)
  | COMMA
  | COMMENT
  | EOL
  | DOT
  | NOT
  | SUC
  | SORT
  | SORTS
  | LOGIC
  | OPS
  | PRED
  | PREDS
  | GENERATED
  | FREE

open Parsing;;
let _ = parse_error;;
let yytransl_const = [|
  257 (* SPEC *);
  258 (* THEN *);
  259 (* CHORD *);
  260 (* OP *);
  261 (* HASABSNOTE *);
  262 (* ROOT *);
  263 (* HASRELNOTE *);
  264 (* END *);
  265 (* PRIORITY *);
  266 (* OPEN *);
  267 (* CLOSE *);
    0 (* EOF *);
  268 (* COLON *);
  269 (* PERCENT *);
  271 (* EQUALS *);
  273 (* COMMA *);
  274 (* COMMENT *);
  275 (* EOL *);
  276 (* DOT *);
  277 (* NOT *);
  278 (* SUC *);
  279 (* SORT *);
  280 (* SORTS *);
  281 (* LOGIC *);
  282 (* OPS *);
  283 (* PRED *);
  284 (* PREDS *);
  285 (* GENERATED *);
  286 (* FREE *);
    0|]

let yytransl_block = [|
  270 (* IDENT *);
  272 (* INT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\001\000\000\000"

let yylen = "\002\000\
\004\000\005\000\002\000\002\000\008\000\008\000\008\000\006\000\
\008\000\006\000\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\011\000\012\000\
\000\000\000\000\014\000\013\000\000\000\004\000\003\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\
\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\
\000\000\008\000\000\000\000\000\000\000\000\000\000\000\006\000\
\007\000\005\000\009\000"

let yydgoto = "\002\000\
\011\000\012\000"

let yysindex = "\255\255\
\001\000\000\000\246\254\001\000\001\000\247\254\000\000\000\000\
\255\254\001\255\000\000\000\000\251\254\000\000\000\000\000\255\
\253\254\003\255\004\255\005\255\002\255\006\255\001\000\014\255\
\008\255\010\255\011\255\012\255\013\255\015\255\000\000\001\000\
\007\255\016\255\018\255\017\255\019\255\021\255\000\000\001\000\
\020\255\022\255\023\255\001\000\025\255\000\000\030\255\027\255\
\033\255\000\000\029\255\001\000\001\000\001\000\001\000\000\000\
\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\254\255"

let yytablesize = 277
let yytable = "\001\000\
\008\000\014\000\015\000\013\000\016\000\018\000\019\000\020\000\
\017\000\023\000\025\000\024\000\026\000\027\000\028\000\030\000\
\032\000\029\000\033\000\040\000\031\000\021\000\022\000\034\000\
\035\000\036\000\000\000\037\000\042\000\039\000\038\000\045\000\
\041\000\043\000\044\000\047\000\048\000\046\000\049\000\051\000\
\052\000\050\000\053\000\054\000\055\000\000\000\000\000\000\000\
\000\000\056\000\057\000\058\000\059\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\000\004\000\005\000\006\000\000\000\000\000\000\000\
\007\000\000\000\000\000\000\000\000\000\009\000\000\000\000\000\
\000\000\000\000\000\000\000\000\010\000"

let yycheck = "\001\000\
\000\000\004\000\005\000\014\001\014\001\005\001\006\001\007\001\
\010\001\015\001\014\001\012\001\010\001\010\001\010\001\010\001\
\003\001\016\001\011\001\013\001\023\000\021\001\022\001\014\001\
\014\001\014\001\255\255\015\001\011\001\032\000\016\001\011\001\
\017\001\017\001\016\001\016\001\015\001\040\000\016\001\015\001\
\011\001\044\000\016\001\011\001\016\001\255\255\255\255\255\255\
\255\255\052\000\053\000\054\000\055\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\255\255\255\255\255\255\
\008\001\255\255\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\255\255\255\255\255\255\020\001"

let yynames_const = "\
  SPEC\000\
  THEN\000\
  CHORD\000\
  OP\000\
  HASABSNOTE\000\
  ROOT\000\
  HASRELNOTE\000\
  END\000\
  PRIORITY\000\
  OPEN\000\
  CLOSE\000\
  EOF\000\
  COLON\000\
  PERCENT\000\
  EQUALS\000\
  COMMA\000\
  COMMENT\000\
  EOL\000\
  DOT\000\
  NOT\000\
  SUC\000\
  SORT\000\
  SORTS\000\
  LOGIC\000\
  OPS\000\
  PRED\000\
  PREDS\000\
  GENERATED\000\
  FREE\000\
  "

let yynames_block = "\
  IDENT\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'chord) in
    Obj.repr(
# 43 "Nameparser.mly"
                          (_2)
# 238 "Nameparser.ml"
               : 'chord))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'chord) in
    Obj.repr(
# 44 "Nameparser.mly"
                             ("")
# 246 "Nameparser.ml"
               : 'chord))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'chord) in
    Obj.repr(
# 45 "Nameparser.mly"
              ("")
# 253 "Nameparser.ml"
               : 'chord))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'chord) in
    Obj.repr(
# 46 "Nameparser.mly"
             ("")
# 260 "Nameparser.ml"
               : 'chord))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'chord) in
    Obj.repr(
# 47 "Nameparser.mly"
                                                  ("")
# 269 "Nameparser.ml"
               : 'chord))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'chord) in
    Obj.repr(
# 48 "Nameparser.mly"
                                                  ("")
# 278 "Nameparser.ml"
               : 'chord))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'chord) in
    Obj.repr(
# 49 "Nameparser.mly"
                                             ("")
# 287 "Nameparser.ml"
               : 'chord))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'chord) in
    Obj.repr(
# 50 "Nameparser.mly"
                               ("")
# 296 "Nameparser.ml"
               : 'chord))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'chord) in
    Obj.repr(
# 51 "Nameparser.mly"
                                          ("")
# 305 "Nameparser.ml"
               : 'chord))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'chord) in
    Obj.repr(
# 52 "Nameparser.mly"
                                         ("")
# 313 "Nameparser.ml"
               : 'chord))
; (fun __caml_parser_env ->
    Obj.repr(
# 53 "Nameparser.mly"
      ("")
# 319 "Nameparser.ml"
               : 'chord))
; (fun __caml_parser_env ->
    Obj.repr(
# 54 "Nameparser.mly"
      ("")
# 325 "Nameparser.ml"
               : 'chord))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'chord) in
    Obj.repr(
# 57 "Nameparser.mly"
        ( _1 )
# 332 "Nameparser.ml"
               : string))
(* Entry chord1 *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let chord1 (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : string)
